
需要掌握 
0-1背包 一维 (别忘了倒遍历)  二维(会求路径 从目标点往前面遍历)
完全背包 一维 

怎么初始化 dp边界 类似于递归边界 递归从后往前 dp从前往后(后面的查前面的表)

怎么对准模型 有缺省值 比如价值缺省 见:零钱兑换

脚标和索引的对齐 如果是二维 要多一行多一列 v w 要多一列 
一维多一列即可  要特别注意 第一列的元素是dp边界要考虑设为多少

最优化问题 装东西 最大 最小 
1.恰好装满 最优 
最大 初始化除了第一列dp边界外其余数设为极小值 
最小则反之
2.不一定装满 最优
最大 初始化除了第一列dp边界外其余数设为极小值 
最小则反之


求方案数 分钱
dp边界要注意 根据dp[i]的定义来确定是多少 求用任意数量不同面值的零钱换到amount所用的最少数量 那么dp[0]就是0 但是 任选硬币凑成指定金额,求组合总数 dp[0]就是1
其他的数字设为多少要根据题干
!!!!  比如说如果凑不出来输出-1 那么其余的元素初始化的时候就设为-1

状态转移方程具体的写法 比如减去多少 要根据题干而定 dp[j-nums[i]]+v[i]  完全平方数 里面就是dp[j-nums[i]**2]+1

声明数组的时候注意大小
遍历的时候注意for循环的范围